package de.labathome;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.nio.ByteBuffer;

import org.junit.jupiter.api.Test;

/**
 * The purpose of this test class is to check the full API of BinaryTimeseries for consistency.
 * The test code can be automagically generated by running the {@code main} method of this class.
 * 
 * @author Jonathan Schilling (jonathan.schilling@mail.de)
 */
public class ApiTests {

	/**
	 * Generate all test methods in this class and print the source code to the command line.
	 * @param args ignored
	 */
	public static void main(String[] args) {
		
		final byte[] time_dtypes = new byte[] {
				BinaryTimeseries.DTYPE_LONG,
				BinaryTimeseries.DTYPE_DOUBLE
		};
		
		final byte[] scaling_dtypes = new byte[] {
				BinaryTimeseries.DTYPE_NONE,
				BinaryTimeseries.DTYPE_BYTE,
				BinaryTimeseries.DTYPE_SHORT,
				BinaryTimeseries.DTYPE_INT,
				BinaryTimeseries.DTYPE_LONG,
				BinaryTimeseries.DTYPE_FLOAT,
				BinaryTimeseries.DTYPE_DOUBLE
		};
		
		final byte[] data_dtypes = new byte[] {
				BinaryTimeseries.DTYPE_BYTE,
				BinaryTimeseries.DTYPE_SHORT,
				BinaryTimeseries.DTYPE_INT,
				BinaryTimeseries.DTYPE_LONG,
				BinaryTimeseries.DTYPE_FLOAT,
				BinaryTimeseries.DTYPE_DOUBLE
		};
		
		final int[] data_sizes = new int[] {
				Byte.BYTES,
				Short.BYTES,
				Integer.BYTES,
				Long.BYTES,
				Float.BYTES,
				Double.BYTES
		};
		
		int numTests = 0;
		for (int time_dtype_idx=0; time_dtype_idx<time_dtypes.length; ++time_dtype_idx) {
			final byte time_dtype = time_dtypes[time_dtype_idx];
			final String strTime = BinaryTimeseries.dtypeStr(time_dtype);
			
			for (int scaling_dtype_idx=0; scaling_dtype_idx<scaling_dtypes.length; ++scaling_dtype_idx) {
				final byte scaling_dtype = scaling_dtypes[scaling_dtype_idx];
				final String strScaling = BinaryTimeseries.dtypeStr(scaling_dtype);
				
				for (int data_dtype_idx=0; data_dtype_idx<data_dtypes.length; ++data_dtype_idx) {
					final byte data_dtype = data_dtypes[data_dtype_idx];
					final String strData = BinaryTimeseries.dtypeStr(data_dtype);
					final int data_size = data_sizes[data_dtype_idx];
					
					final String testId = strTime+"_"+strScaling+"_"+strData;
					System.out.println(String.format("	// %2d ", numTests+1)+testId);
					
					final int numSamples = 10;
					
					final   long t0_L = 13;
					final double t0_D = 13.0;
					
					final   long dt_L = 37;
					final double dt_D = 37.0;
					
					final   byte scalingOffset_B = (byte)  1.2;
					final  short scalingOffset_S = (short) 1.2;
					final    int scalingOffset_I = (int)   1.2;
					final   long scalingOffset_L = (long)  1.2;
					final  float scalingOffset_F = (float) 1.2;
					final double scalingOffset_D = (double)1.2;
					
					final   byte scalingFactor_B = (byte)  24.3;
					final  short scalingFactor_S = (short) 24.3;
					final    int scalingFactor_I = (int)   24.3;
					final   long scalingFactor_L = (long)  24.3;
					final  float scalingFactor_F = (float) 24.3;
					final double scalingFactor_D = (double)24.3;
					
					// time series:
					// idx | time  | value
					//   0 |  13.0 |   1.2
					//   1 |  50.0 |  25.5
					//   2 |  87.0 |  49.8
					//   3 | 124.0 |  74.1
					//   4 | 161.0 |  98.4
					//   5 | 198.0 | 122.7
					//   6 | 235.0 | 147.0
					//   7 | 272.0 | 171.3
					//   8 | 309.0 | 195.6
					//   9 | 346.0 | 219.9
					
					final int numSamplesSubset = 5;
					final int sourceOffset = 2;
					final int targetOffset = 0;
					
					final   long t_l_L = 80;   // => firstIndexInside = 2
					final double t_l_D = 80.0; // => firstIndexInside = 2
					
					final   long t_u_L = 300;   // => lastIndexInside = 7
					final double t_u_D = 300.0; // => lastIndexInside = 7
					
					// compute file size from reserved number of header bytes, sample size and number of samples
					final int filesize = 64 + data_size*numSamples;
					
					final byte[] binaryTimeseries = new byte[filesize];
					
					// check static routines
					if (scaling_dtype_idx == 0 && data_dtype_idx == 0) {
						// these need to be executed only once per time type
						
						// buildTimebase
						if (time_dtype == BinaryTimeseries.DTYPE_LONG) {
							
							// testBuiltTimebase_L
							System.out.println("	@Test\n"+
									"	public void testBuiltTimebase_L() {\n"+
									"		final int numSamples = "+numSamples+";\n"+
									"		final long t0_L = "+t0_L+";\n"+
									"		final long dt_L = "+dt_L+";\n"+
									"		final int numSamplesSubset = "+numSamplesSubset+";\n"+
									"		final int sourceOffset = "+sourceOffset+";\n"+
									"		final int targetOffset = "+targetOffset+";\n"+
									"		\n"+
									"		// 'manually' build reference time stamps\n"+ 
									"		final long[] timebase = new long[numSamples];\n"+
									"		for (int i=0; i<numSamples; ++i) {\n"+
									"			timebase[i] = t0_L + i*dt_L;\n"+
									"		}\n"+
									"		final long[] timebase_subset = new long[numSamplesSubset];\n"+
									"		System.arraycopy(timebase, sourceOffset, timebase_subset, targetOffset, numSamplesSubset);\n"+
									"		\n"+
									"		// no sourceOffset and targetOffset given\n"+
									"		final long[] targetTimebase = new long[numSamples];\n"+
									"		BinaryTimeseries.buildTimebase(targetTimebase, t0_L, dt_L);\n"+
									"		assertArrayEquals(timebase, targetTimebase);\n"+
									"		\n"+
									"		// sourceOffset and targetOffset are given\n"+
									"		final long[] targetTimebase_subset = new long[numSamplesSubset];\n"+
									"		BinaryTimeseries.buildTimebase(sourceOffset, targetTimebase_subset, targetOffset, numSamplesSubset, t0_L, dt_L);\n"+
									"		assertArrayEquals(timebase_subset, targetTimebase_subset);\n"+
									"	}\n");
							
							// testFirstIndexInside_L
							System.out.println("	@Test\n"+
									"	public void testFirstIndexInside_L() {\n"+
									"		final long t0_L  = "+t0_L+";\n"+
									"		final long dt_L  = "+dt_L+";\n"+
									"		final long t_l_L = "+t_l_L+";\n"+
									"		assertEquals(2, BinaryTimeseries.firstIndexInside(t0_L, dt_L, t_l_L));\n"+
									"	}\n");
							
							// testLastIndexInside_L
							System.out.println("	@Test\n"+
									"	public void testLastIndexInside_L() {\n"+
									"		final long t0_L  = "+t0_L+";\n"+
									"		final long dt_L  = "+dt_L+";\n"+
									"		final long t_u_L = "+t_u_L+";\n"+
									"		assertEquals(7, BinaryTimeseries.lastIndexInside(t0_L, dt_L, t_u_L));\n"+
									"	}\n");
							                                                                                                                                          
						} else if (time_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
							System.out.println("	@Test\n"+
									"	public void testBuiltTimebase_D() {\n"+
									"		final int numSamples = "+numSamples+";\n"+
									"		final double t0_D = "+t0_D+";\n"+
									"		final double dt_D = "+dt_D+";\n"+
									"		final int numSamplesSubset = "+numSamplesSubset+";\n"+
									"		final int sourceOffset = "+sourceOffset+";\n"+
									"		final int targetOffset = "+targetOffset+";\n"+
									"		\n"+
									"		// 'manually' build reference time stamps\n"+ 
									"		final double[] timebase = new double[numSamples];\n"+
									"		for (int i=0; i<numSamples; ++i) {\n"+
									"			timebase[i] = t0_D + i*dt_D;\n"+
									"		}\n"+
									"		final double[] timebase_subset = new double[numSamplesSubset];\n"+
									"		System.arraycopy(timebase, sourceOffset, timebase_subset, targetOffset, numSamplesSubset);\n"+
									"		\n"+
									"		// no sourceOffset and targetOffset given\n"+
									"		final double[] targetTimebase = new double[numSamples];\n"+
									"		BinaryTimeseries.buildTimebase(targetTimebase, t0_D, dt_D);\n"+
									"		assertArrayEquals(timebase, targetTimebase);\n"+
									"		\n"+
									"		// sourceOffset and targetOffset are given\n"+
									"		final double[] targetTimebase_subset = new double[numSamplesSubset];\n"+
									"		BinaryTimeseries.buildTimebase(sourceOffset, targetTimebase_subset, targetOffset, numSamplesSubset, t0_D, dt_D);\n"+
									"		assertArrayEquals(timebase_subset, targetTimebase_subset);\n"+
									"	}\n");
							
							// testFirstIndexInside_D
							System.out.println("	@Test\n"+
									"	public void testFirstIndexInside_D() {\n"+
									"		final double t0_D  = "+t0_D+";\n"+
									"		final double dt_D  = "+dt_D+";\n"+
									"		final double t_l_D = "+t_l_D+";\n"+
									"		assertEquals(2, BinaryTimeseries.firstIndexInside(t0_D, dt_D, t_l_D));\n"+
									"	}\n");
							
							// testLastIndexInside_D
							System.out.println("	@Test\n"+
									"	public void testLastIndexInside_D() {\n"+
									"		final double t0_D  = "+t0_D+";\n"+
									"		final double dt_D  = "+dt_D+";\n"+
									"		final double t_u_D = "+t_u_D+";\n"+
									"		assertEquals(7, BinaryTimeseries.lastIndexInside(t0_D, dt_D, t_u_D));\n"+
									"	}\n");
						}
					}
					
					if (time_dtype_idx == 0 && data_dtype_idx == 0) {
						// these need to be executed only once per scaling type
						
						
						
						
					}
					
					if (time_dtype_idx == 0 && scaling_dtype_idx == 0) {
						// these need to be executed only once per data type
						
						// fileOffset
						System.out.println("	@Test\n"+
								"	public void testFileOffset_"+BinaryTimeseries.dtypeStr(data_dtype)+"() {\n"+
								"		assertEquals("+filesize+", BinaryTimeseries.fileOffset("+data_size+", 10));\n"+
								"	}\n");
					}
					
					// 'manually' build a BinaryTimeseries
					final ByteBuffer referenceTarget = ByteBuffer.wrap(binaryTimeseries);
					//assertEquals(0, referenceTarget.position());
					// endianess check short
					referenceTarget.putShort((short)1);
					//assertEquals(2, referenceTarget.position());
					// dtype of time
					referenceTarget.put(time_dtype);
					//assertEquals(3, referenceTarget.position());
					// t0
					if (time_dtype == BinaryTimeseries.DTYPE_LONG) {
						referenceTarget.putLong(t0_L);
					} else if (time_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						referenceTarget.putDouble(t0_D);
					}
					//assertEquals(11, referenceTarget.position());
					// dt
					if (time_dtype == BinaryTimeseries.DTYPE_LONG) {
						referenceTarget.putLong(dt_L);
					} else if (time_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						referenceTarget.putDouble(dt_D);
					}
					//assertEquals(19, referenceTarget.position());
					// scaling dtype
					referenceTarget.put(scaling_dtype);
					//assertEquals(20, referenceTarget.position());
					// scaling offset
					if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
						referenceTarget.put(new byte[8]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
						referenceTarget.put(scalingOffset_B);
						referenceTarget.put(new byte[8-Byte.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
						referenceTarget.putShort(scalingOffset_S);
						referenceTarget.put(new byte[8-Short.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
						referenceTarget.putInt(scalingOffset_I);
						referenceTarget.put(new byte[8-Integer.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
						referenceTarget.putLong(scalingOffset_L);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
						referenceTarget.putFloat(scalingOffset_F);
						referenceTarget.put(new byte[8-Float.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						referenceTarget.putDouble(scalingOffset_D);
					}
					//assertEquals(28, referenceTarget.position());
					// scaling factor
					if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
						referenceTarget.put(new byte[8]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
						referenceTarget.put(scalingFactor_B);
						referenceTarget.put(new byte[8-Byte.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
						referenceTarget.putShort(scalingFactor_S);
						referenceTarget.put(new byte[8-Short.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
						referenceTarget.putInt(scalingFactor_I);
						referenceTarget.put(new byte[8-Integer.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
						referenceTarget.putLong(scalingFactor_L);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
						referenceTarget.putFloat(scalingFactor_F);
						referenceTarget.put(new byte[8-Float.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						referenceTarget.putDouble(scalingFactor_D);
					}
					//assertEquals(36, referenceTarget.position());
					// reserved dummy space
					referenceTarget.put(new byte[23]);
					//assertEquals(59, referenceTarget.position());
					// type of raw data
					referenceTarget.put(data_dtype);
					//assertEquals(60, referenceTarget.position());
					// number of samples
					referenceTarget.putInt(numSamples);
					//assertEquals(64, referenceTarget.position());
					// actual data
					Object samples = null;
					if (data_dtype == BinaryTimeseries.DTYPE_BYTE) {
						samples = new byte[numSamples];
						byte sample = 0;
						for (int i=0; i<numSamples; ++i) {
							if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
								sample = (byte) i;
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
								sample = (byte) (scalingOffset_B + i*scalingFactor_B);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
								sample = (byte) (scalingOffset_S + i*scalingFactor_S);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
								sample = (byte) (scalingOffset_I + i*scalingFactor_I);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
								sample = (byte) (scalingOffset_L + i*scalingFactor_L);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
								sample = (byte) (scalingOffset_F + i*scalingFactor_F);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
								sample = (byte) (scalingOffset_D + i*scalingFactor_D);
							}
							referenceTarget.put(sample);
							((byte[])samples)[i] = sample;
						}
					} else if (data_dtype == BinaryTimeseries.DTYPE_SHORT) {
						samples = new short[numSamples];
						short sample = 0;
						for (int i=0; i<numSamples; ++i) {
							if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
								sample = (short) i;
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
								sample = (short) (scalingOffset_B + i*scalingFactor_B);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
								sample = (short) (scalingOffset_S + i*scalingFactor_S);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
								sample = (short) (scalingOffset_I + i*scalingFactor_I);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
								sample = (short) (scalingOffset_L + i*scalingFactor_L);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
								sample = (short) (scalingOffset_F + i*scalingFactor_F);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
								sample = (short) (scalingOffset_D + i*scalingFactor_D);
							}
							referenceTarget.putShort(sample);
							((short[])samples)[i] = sample;
						}
					} else if (data_dtype == BinaryTimeseries.DTYPE_INT) {
						samples = new int[numSamples];
						int sample = 0;
						for (int i=0; i<numSamples; ++i) {
							if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
								sample = (int) i;
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
								sample = (int) (scalingOffset_B + i*scalingFactor_B);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
								sample = (int) (scalingOffset_S + i*scalingFactor_S);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
								sample = (int) (scalingOffset_I + i*scalingFactor_I);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
								sample = (int) (scalingOffset_L + i*scalingFactor_L);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
								sample = (int) (scalingOffset_F + i*scalingFactor_F);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
								sample = (int) (scalingOffset_D + i*scalingFactor_D);
							}
							referenceTarget.putInt(sample);
							((int[])samples)[i] = sample;
						}
					} else if (data_dtype == BinaryTimeseries.DTYPE_LONG) {
						samples = new long[numSamples];
						long sample = 0;
						for (int i=0; i<numSamples; ++i) {
							if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
								sample = (long) i;
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
								sample = (long) (scalingOffset_B + i*scalingFactor_B);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
								sample = (long) (scalingOffset_S + i*scalingFactor_S);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
								sample = (long) (scalingOffset_I + i*scalingFactor_I);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
								sample = (long) (scalingOffset_L + i*scalingFactor_L);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
								sample = (long) (scalingOffset_F + i*scalingFactor_F);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
								sample = (long) (scalingOffset_D + i*scalingFactor_D);
							}
							referenceTarget.putLong(sample);
							((long[])samples)[i] = sample;
						}
					} else if (data_dtype == BinaryTimeseries.DTYPE_FLOAT) {
						samples = new float[numSamples];
						float sample = (float) 0.0;
						for (int i=0; i<numSamples; ++i) {
							if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
								sample = (float) i;
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
								sample = (float) (scalingOffset_B + i*scalingFactor_B);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
								sample = (float) (scalingOffset_S + i*scalingFactor_S);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
								sample = (float) (scalingOffset_I + i*scalingFactor_I);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
								sample = (float) (scalingOffset_L + i*scalingFactor_L);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
								sample = (float) (scalingOffset_F + i*scalingFactor_F);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
								sample = (float) (scalingOffset_D + i*scalingFactor_D);
							}
							referenceTarget.putFloat(sample);
							((float[])samples)[i] = sample;
						}
					} else if (data_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						samples = new double[numSamples];
						double sample = 0.0;
						for (int i=0; i<numSamples; ++i) {
							if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
								sample = (double) i;
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
								sample = (double) (scalingOffset_B + i*scalingFactor_B);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
								sample = (double) (scalingOffset_S + i*scalingFactor_S);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
								sample = (double) (scalingOffset_I + i*scalingFactor_I);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
								sample = (double) (scalingOffset_L + i*scalingFactor_L);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
								sample = (double) (scalingOffset_F + i*scalingFactor_F);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
								sample = (double) (scalingOffset_D + i*scalingFactor_D);
							}
							referenceTarget.putDouble(sample);
							((double[])samples)[i] = sample;
						}
					}
					//assertEquals(filesize, referenceTarget.position());
					
					// generate textual representation of byte array containing the reference BinaryTimeseries
					String btsDef = "final byte[] referenceBTS_"+testId+" = new byte[] {\n\t";
					for (int i=0; i<filesize-1; ++i) {
						if ((i+1)%8==0) {
							btsDef += String.format("(byte) 0x%02X,\n\t", binaryTimeseries[i]); 
						} else {
							btsDef += String.format("(byte) 0x%02X, ", binaryTimeseries[i]);
						}
					}
					btsDef += String.format("(byte) 0x%02X };", binaryTimeseries[filesize-1]);
					
					// check writing routines
					System.out.println("	@Test\n"+
							"	public void testWriting_"+testId+"() {\n"+
							"		"+btsDef.replace("\t", "\t\t\t")+"\n"+
							
							
							
							
							"	}\n");
					
					// build BinaryTimeseries using API methods
					//final   long t0_L = t0_L;
					//final double t0_D = t0_D;
					//final   long dt_L = dt_L;
					//final double dt_D = dt_D;
					
					final int fileSize = BinaryTimeseries.fileOffset(data_size, numSamples);
					final byte[] targetArr = new byte[fileSize];
					final ByteBuffer target = ByteBuffer.wrap(targetArr);
					assertEquals(0, target.position());
					BinaryTimeseries.writeEndianessCheckValue(target);
					assertEquals(1, target.position());
					if (time_dtype == BinaryTimeseries.DTYPE_LONG) {
						BinaryTimeseries.writeTimebase(target, t0_L, dt_L);
					} else if (time_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						BinaryTimeseries.writeTimebase(target, t0_D, dt_D);
					}
					assertEquals(19, target.position());
					if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
						BinaryTimeseries.writeScalingDisabled(target);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
						BinaryTimeseries.writeScaling(target, scalingOffset_B, scalingFactor_B);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
						BinaryTimeseries.writeScaling(target, scalingOffset_S, scalingFactor_S);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
						BinaryTimeseries.writeScaling(target, scalingOffset_I, scalingFactor_I);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
						BinaryTimeseries.writeScaling(target, scalingOffset_L, scalingFactor_L);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
						BinaryTimeseries.writeScaling(target, scalingOffset_F, scalingFactor_F);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						BinaryTimeseries.writeScaling(target, scalingOffset_D, scalingFactor_D);
					}
					assertEquals(36, target.position());
					BinaryTimeseries.writeReservedDummy(target);
					assertEquals(59, target.position());
					if (data_dtype == BinaryTimeseries.DTYPE_BYTE) {
						BinaryTimeseries.writeData(target, (byte[])samples);
					} else if (data_dtype == BinaryTimeseries.DTYPE_SHORT) {
						BinaryTimeseries.writeData(target, (short[])samples);
					} else if (data_dtype == BinaryTimeseries.DTYPE_INT) {
						BinaryTimeseries.writeData(target, (int[])samples);
					} else if (data_dtype == BinaryTimeseries.DTYPE_LONG) {
						BinaryTimeseries.writeData(target, (long[])samples);
					} else if (data_dtype == BinaryTimeseries.DTYPE_FLOAT) {
						BinaryTimeseries.writeData(target, (float[])samples);
					} else if (data_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						BinaryTimeseries.writeData(target, (double[])samples);
					}
					
					
					
					//"	assertArrayEquals(referenceBTS_"+testId+", targetArr);\n"
					
					
					// rewind and re-check using write() without scaling
					
					// rewind and re-check using write() with scaling
					
					
					
					
					
					
					
					
					// check reading routines
					
					
					numTests++;
				}
			}
			
		}
		
		System.out.println("	// total number of tests: "+numTests);
	}
	
	/**
	 * Test that building the binaryTimeseries results in the correct file offsets.
	 */
	@Test
	public void testBuildBinaryTimeseries() {
		
		final byte[] time_dtypes = new byte[] {
				BinaryTimeseries.DTYPE_LONG,
				BinaryTimeseries.DTYPE_DOUBLE
		};
		
		final byte[] scaling_dtypes = new byte[] {
				BinaryTimeseries.DTYPE_NONE,
				BinaryTimeseries.DTYPE_BYTE,
				BinaryTimeseries.DTYPE_SHORT,
				BinaryTimeseries.DTYPE_INT,
				BinaryTimeseries.DTYPE_LONG,
				BinaryTimeseries.DTYPE_FLOAT,
				BinaryTimeseries.DTYPE_DOUBLE
		};
		
		final byte[] data_dtypes = new byte[] {
				BinaryTimeseries.DTYPE_BYTE,
				BinaryTimeseries.DTYPE_SHORT,
				BinaryTimeseries.DTYPE_INT,
				BinaryTimeseries.DTYPE_LONG,
				BinaryTimeseries.DTYPE_FLOAT,
				BinaryTimeseries.DTYPE_DOUBLE
		};
		
		final int[] data_sizes = new int[] {
				Byte.BYTES,
				Short.BYTES,
				Integer.BYTES,
				Long.BYTES,
				Float.BYTES,
				Double.BYTES
		};
		
		for (int time_dtype_idx=0; time_dtype_idx<time_dtypes.length; ++time_dtype_idx) {
			final byte time_dtype = time_dtypes[time_dtype_idx];
			
			for (int scaling_dtype_idx=0; scaling_dtype_idx<scaling_dtypes.length; ++scaling_dtype_idx) {
				final byte scaling_dtype = scaling_dtypes[scaling_dtype_idx];
				
				for (int data_dtype_idx=0; data_dtype_idx<data_dtypes.length; ++data_dtype_idx) {
					final byte data_dtype = data_dtypes[data_dtype_idx];
					final int data_size = data_sizes[data_dtype_idx];
					
					final int numSamples = 10;
					
					final   long t0_L = 13;
					final double t0_D = 13.0;
					
					final   long dt_L = 37;
					final double dt_D = 37.0;
					
					final   byte scalingOffset_B = (byte)  1.2;
					final  short scalingOffset_S = (short) 1.2;
					final    int scalingOffset_I = (int)   1.2;
					final   long scalingOffset_L = (long)  1.2;
					final  float scalingOffset_F = (float) 1.2;
					final double scalingOffset_D = (double)1.2;
					
					final   byte scalingFactor_B = (byte)  24.3;
					final  short scalingFactor_S = (short) 24.3;
					final    int scalingFactor_I = (int)   24.3;
					final   long scalingFactor_L = (long)  24.3;
					final  float scalingFactor_F = (float) 24.3;
					final double scalingFactor_D = (double)24.3;
					
					// time series:
					// idx | time  | value
					//   0 |  13.0 |   1.2
					//   1 |  50.0 |  25.5
					//   2 |  87.0 |  49.8
					//   3 | 124.0 |  74.1
					//   4 | 161.0 |  98.4
					//   5 | 198.0 | 122.7
					//   6 | 235.0 | 147.0
					//   7 | 272.0 | 171.3
					//   8 | 309.0 | 195.6
					//   9 | 346.0 | 219.9
					
					// compute file size from reserved number of header bytes, sample size and number of samples
					final int filesize = 64 + data_size*numSamples;
					
					// 'manually' build a BinaryTimeseries
					final byte[] binaryTimeseries = new byte[filesize];
					final ByteBuffer referenceTarget = ByteBuffer.wrap(binaryTimeseries);
					assertEquals(0, referenceTarget.position());
					// endianess check short
					referenceTarget.putShort((short)1);
					assertEquals(2, referenceTarget.position());
					// dtype of time
					referenceTarget.put(time_dtype);
					assertEquals(3, referenceTarget.position());
					// t0
					if (time_dtype == BinaryTimeseries.DTYPE_LONG) {
						referenceTarget.putLong(t0_L);
					} else if (time_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						referenceTarget.putDouble(t0_D);
					}
					assertEquals(11, referenceTarget.position());
					// dt
					if (time_dtype == BinaryTimeseries.DTYPE_LONG) {
						referenceTarget.putLong(dt_L);
					} else if (time_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						referenceTarget.putDouble(dt_D);
					}
					assertEquals(19, referenceTarget.position());
					// scaling dtype
					referenceTarget.put(scaling_dtype);
					assertEquals(20, referenceTarget.position());
					// scaling offset
					if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
						referenceTarget.put(new byte[8]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
						referenceTarget.put(scalingOffset_B);
						referenceTarget.put(new byte[8-Byte.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
						referenceTarget.putShort(scalingOffset_S);
						referenceTarget.put(new byte[8-Short.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
						referenceTarget.putInt(scalingOffset_I);
						referenceTarget.put(new byte[8-Integer.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
						referenceTarget.putLong(scalingOffset_L);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
						referenceTarget.putFloat(scalingOffset_F);
						referenceTarget.put(new byte[8-Float.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						referenceTarget.putDouble(scalingOffset_D);
					}
					assertEquals(28, referenceTarget.position());
					// scaling factor
					if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
						referenceTarget.put(new byte[8]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
						referenceTarget.put(scalingFactor_B);
						referenceTarget.put(new byte[8-Byte.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
						referenceTarget.putShort(scalingFactor_S);
						referenceTarget.put(new byte[8-Short.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
						referenceTarget.putInt(scalingFactor_I);
						referenceTarget.put(new byte[8-Integer.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
						referenceTarget.putLong(scalingFactor_L);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
						referenceTarget.putFloat(scalingFactor_F);
						referenceTarget.put(new byte[8-Float.BYTES]);
					} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						referenceTarget.putDouble(scalingFactor_D);
					}
					assertEquals(36, referenceTarget.position());
					// reserved dummy space
					referenceTarget.put(new byte[23]);
					assertEquals(59, referenceTarget.position());
					// type of raw data
					referenceTarget.put(data_dtype);
					assertEquals(60, referenceTarget.position());
					// number of samples
					referenceTarget.putInt(numSamples);
					assertEquals(64, referenceTarget.position());
					// actual data
					if (data_dtype == BinaryTimeseries.DTYPE_BYTE) {
						byte sample = 0;
						for (int i=0; i<numSamples; ++i) {
							if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
								sample = (byte) i;
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
								sample = (byte) (scalingOffset_B + i*scalingFactor_B);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
								sample = (byte) (scalingOffset_S + i*scalingFactor_S);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
								sample = (byte) (scalingOffset_I + i*scalingFactor_I);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
								sample = (byte) (scalingOffset_L + i*scalingFactor_L);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
								sample = (byte) (scalingOffset_F + i*scalingFactor_F);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
								sample = (byte) (scalingOffset_D + i*scalingFactor_D);
							}
							referenceTarget.put(sample);
						}
					} else if (data_dtype == BinaryTimeseries.DTYPE_SHORT) {
						short sample = 0;
						for (int i=0; i<numSamples; ++i) {
							if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
								sample = (short) i;
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
								sample = (short) (scalingOffset_B + i*scalingFactor_B);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
								sample = (short) (scalingOffset_S + i*scalingFactor_S);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
								sample = (short) (scalingOffset_I + i*scalingFactor_I);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
								sample = (short) (scalingOffset_L + i*scalingFactor_L);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
								sample = (short) (scalingOffset_F + i*scalingFactor_F);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
								sample = (short) (scalingOffset_D + i*scalingFactor_D);
							}
							referenceTarget.putShort(sample);
						}
					} else if (data_dtype == BinaryTimeseries.DTYPE_INT) {
						int sample = 0;
						for (int i=0; i<numSamples; ++i) {
							if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
								sample = (int) i;
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
								sample = (int) (scalingOffset_B + i*scalingFactor_B);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
								sample = (int) (scalingOffset_S + i*scalingFactor_S);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
								sample = (int) (scalingOffset_I + i*scalingFactor_I);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
								sample = (int) (scalingOffset_L + i*scalingFactor_L);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
								sample = (int) (scalingOffset_F + i*scalingFactor_F);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
								sample = (int) (scalingOffset_D + i*scalingFactor_D);
							}
							referenceTarget.putInt(sample);
						}
					} else if (data_dtype == BinaryTimeseries.DTYPE_LONG) {
						long sample = 0;
						for (int i=0; i<numSamples; ++i) {
							if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
								sample = (long) i;
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
								sample = (long) (scalingOffset_B + i*scalingFactor_B);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
								sample = (long) (scalingOffset_S + i*scalingFactor_S);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
								sample = (long) (scalingOffset_I + i*scalingFactor_I);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
								sample = (long) (scalingOffset_L + i*scalingFactor_L);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
								sample = (long) (scalingOffset_F + i*scalingFactor_F);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
								sample = (long) (scalingOffset_D + i*scalingFactor_D);
							}
							referenceTarget.putLong(sample);
						}
					} else if (data_dtype == BinaryTimeseries.DTYPE_FLOAT) {
						float sample = (float) 0.0;
						for (int i=0; i<numSamples; ++i) {
							if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
								sample = (float) i;
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
								sample = (float) (scalingOffset_B + i*scalingFactor_B);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
								sample = (float) (scalingOffset_S + i*scalingFactor_S);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
								sample = (float) (scalingOffset_I + i*scalingFactor_I);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
								sample = (float) (scalingOffset_L + i*scalingFactor_L);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
								sample = (float) (scalingOffset_F + i*scalingFactor_F);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
								sample = (float) (scalingOffset_D + i*scalingFactor_D);
							}
							referenceTarget.putFloat(sample);
						}
					} else if (data_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
						double sample = 0.0;
						for (int i=0; i<numSamples; ++i) {
							if (scaling_dtype == BinaryTimeseries.DTYPE_NONE) {
								sample = (double) i;
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_BYTE) {
								sample = (double) (scalingOffset_B + i*scalingFactor_B);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_SHORT) {
								sample = (double) (scalingOffset_S + i*scalingFactor_S);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_INT) {
								sample = (double) (scalingOffset_I + i*scalingFactor_I);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_LONG) {
								sample = (double) (scalingOffset_L + i*scalingFactor_L);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_FLOAT) {
								sample = (double) (scalingOffset_F + i*scalingFactor_F);
							} else if (scaling_dtype == BinaryTimeseries.DTYPE_DOUBLE) {
								sample = (double) (scalingOffset_D + i*scalingFactor_D);
							}
							referenceTarget.putDouble(sample);
						}
					}
					assertEquals(filesize, referenceTarget.position());
				}
			}
		}
	}
	
	// block comment headers are:
	// - index of test
	// - data type of time expression
	// - data type of scaling parameters
	// - data type of raw data
	
	/***********************************
	 * AUTO-GENERATED CODE STARTS HERE *
	 ***********************************/
	
	//  1 L_N_B
	@Test
	public void testBuiltTimebase_L() {
		final int numSamples = 10;
		final long t0_L = 13;
		final long dt_L = 37;
		final int numSamplesSubset = 5;
		final int sourceOffset = 2;
		final int targetOffset = 0;
		
		// 'manually' build reference time stamps
		final long[] timebase = new long[numSamples];
		for (int i=0; i<numSamples; ++i) {
			timebase[i] = t0_L + i*dt_L;
		}
		final long[] timebase_subset = new long[numSamplesSubset];
		System.arraycopy(timebase, sourceOffset, timebase_subset, targetOffset, numSamplesSubset);
		
		// no sourceOffset and targetOffset given
		final long[] targetTimebase = new long[numSamples];
		BinaryTimeseries.buildTimebase(targetTimebase, t0_L, dt_L);
		assertArrayEquals(timebase, targetTimebase);
		
		// sourceOffset and targetOffset are given
		final long[] targetTimebase_subset = new long[numSamplesSubset];
		BinaryTimeseries.buildTimebase(sourceOffset, targetTimebase_subset, targetOffset, numSamplesSubset, t0_L, dt_L);
		assertArrayEquals(timebase_subset, targetTimebase_subset);
	}

	@Test
	public void testFirstIndexInside_L() {
		final long t0_L  = 13;
		final long dt_L  = 37;
		final long t_l_L = 80;
		assertEquals(2, BinaryTimeseries.firstIndexInside(t0_L, dt_L, t_l_L));
	}

	@Test
	public void testLastIndexInside_L() {
		final long t0_L  = 13;
		final long dt_L  = 37;
		final long t_u_L = 300;
		assertEquals(7, BinaryTimeseries.lastIndexInside(t0_L, dt_L, t_u_L));
	}

	@Test
	public void testFileOffset_B() {
		assertEquals(74, BinaryTimeseries.fileOffset(1, 10));
	}

	@Test
	public void testWriting_L_N_B() {
		final byte[] referenceBTS_L_N_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07,
			(byte) 0x08, (byte) 0x09 };
	}

	//  2 L_N_S
	@Test
	public void testFileOffset_S() {
		assertEquals(84, BinaryTimeseries.fileOffset(2, 10));
	}

	@Test
	public void testWriting_L_N_S() {
		final byte[] referenceBTS_L_N_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x03,
			(byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x07,
			(byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x09 };
	}

	//  3 L_N_I
	@Test
	public void testFileOffset_I() {
		assertEquals(104, BinaryTimeseries.fileOffset(4, 10));
	}

	@Test
	public void testWriting_L_N_I() {
		final byte[] referenceBTS_L_N_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x07,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x09 };
	}

	//  4 L_N_L
	@Test
	public void testFileOffset_L() {
		assertEquals(144, BinaryTimeseries.fileOffset(8, 10));
	}

	@Test
	public void testWriting_L_N_L() {
		final byte[] referenceBTS_L_N_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x07,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x09 };
	}

	//  5 L_N_F
	@Test
	public void testFileOffset_F() {
		assertEquals(104, BinaryTimeseries.fileOffset(4, 10));
	}

	@Test
	public void testWriting_L_N_F() {
		final byte[] referenceBTS_L_N_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x3F, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x40, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0xA0, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0xC0, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0xE0, (byte) 0x00, (byte) 0x00,
			(byte) 0x41, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0x10, (byte) 0x00, (byte) 0x00 };
	}

	//  6 L_N_D
	@Test
	public void testFileOffset_D() {
		assertEquals(144, BinaryTimeseries.fileOffset(8, 10));
	}

	@Test
	public void testWriting_L_N_D() {
		final byte[] referenceBTS_L_N_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x3F, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x08, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x10, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x14, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x1C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x22, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
	}

	//  7 L_B_B
	@Test
	public void testWriting_L_B_B() {
		final byte[] referenceBTS_L_B_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x01, (byte) 0x19, (byte) 0x31, (byte) 0x49, (byte) 0x61, (byte) 0x79, (byte) 0x91, (byte) 0xA9,
			(byte) 0xC1, (byte) 0xD9 };
	}

	//  8 L_B_S
	@Test
	public void testWriting_L_B_S() {
		final byte[] referenceBTS_L_B_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x79, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0xD9 };
	}

	//  9 L_B_I
	@Test
	public void testWriting_L_B_I() {
		final byte[] referenceBTS_L_B_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 10 L_B_L
	@Test
	public void testWriting_L_B_L() {
		final byte[] referenceBTS_L_B_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 11 L_B_F
	@Test
	public void testWriting_L_B_F() {
		final byte[] referenceBTS_L_B_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC8, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0x44, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0x92, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0xC2, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0xF2, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x11, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x29, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x41, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x59, (byte) 0x00, (byte) 0x00 };
	}

	// 12 L_B_D
	@Test
	public void testWriting_L_B_D() {
		final byte[] referenceBTS_L_B_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x39, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x48, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x52, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x58, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x5E, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x62, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x65, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x68, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x6B, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
	}

	// 13 L_S_B
	@Test
	public void testWriting_L_S_B() {
		final byte[] referenceBTS_L_S_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x01, (byte) 0x19, (byte) 0x31, (byte) 0x49, (byte) 0x61, (byte) 0x79, (byte) 0x91, (byte) 0xA9,
			(byte) 0xC1, (byte) 0xD9 };
	}

	// 14 L_S_S
	@Test
	public void testWriting_L_S_S() {
		final byte[] referenceBTS_L_S_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x79, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0xD9 };
	}

	// 15 L_S_I
	@Test
	public void testWriting_L_S_I() {
		final byte[] referenceBTS_L_S_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 16 L_S_L
	@Test
	public void testWriting_L_S_L() {
		final byte[] referenceBTS_L_S_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 17 L_S_F
	@Test
	public void testWriting_L_S_F() {
		final byte[] referenceBTS_L_S_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC8, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0x44, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0x92, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0xC2, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0xF2, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x11, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x29, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x41, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x59, (byte) 0x00, (byte) 0x00 };
	}

	// 18 L_S_D
	@Test
	public void testWriting_L_S_D() {
		final byte[] referenceBTS_L_S_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x39, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x48, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x52, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x58, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x5E, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x62, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x65, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x68, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x6B, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
	}

	// 19 L_I_B
	@Test
	public void testWriting_L_I_B() {
		final byte[] referenceBTS_L_I_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x01, (byte) 0x19, (byte) 0x31, (byte) 0x49, (byte) 0x61, (byte) 0x79, (byte) 0x91, (byte) 0xA9,
			(byte) 0xC1, (byte) 0xD9 };
	}

	// 20 L_I_S
	@Test
	public void testWriting_L_I_S() {
		final byte[] referenceBTS_L_I_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x79, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0xD9 };
	}

	// 21 L_I_I
	@Test
	public void testWriting_L_I_I() {
		final byte[] referenceBTS_L_I_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 22 L_I_L
	@Test
	public void testWriting_L_I_L() {
		final byte[] referenceBTS_L_I_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 23 L_I_F
	@Test
	public void testWriting_L_I_F() {
		final byte[] referenceBTS_L_I_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC8, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0x44, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0x92, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0xC2, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0xF2, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x11, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x29, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x41, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x59, (byte) 0x00, (byte) 0x00 };
	}

	// 24 L_I_D
	@Test
	public void testWriting_L_I_D() {
		final byte[] referenceBTS_L_I_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x39, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x48, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x52, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x58, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x5E, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x62, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x65, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x68, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x6B, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
	}

	// 25 L_L_B
	@Test
	public void testWriting_L_L_B() {
		final byte[] referenceBTS_L_L_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x01, (byte) 0x19, (byte) 0x31, (byte) 0x49, (byte) 0x61, (byte) 0x79, (byte) 0x91, (byte) 0xA9,
			(byte) 0xC1, (byte) 0xD9 };
	}

	// 26 L_L_S
	@Test
	public void testWriting_L_L_S() {
		final byte[] referenceBTS_L_L_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x79, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0xD9 };
	}

	// 27 L_L_I
	@Test
	public void testWriting_L_L_I() {
		final byte[] referenceBTS_L_L_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 28 L_L_L
	@Test
	public void testWriting_L_L_L() {
		final byte[] referenceBTS_L_L_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 29 L_L_F
	@Test
	public void testWriting_L_L_F() {
		final byte[] referenceBTS_L_L_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC8, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0x44, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0x92, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0xC2, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0xF2, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x11, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x29, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x41, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x59, (byte) 0x00, (byte) 0x00 };
	}

	// 30 L_L_D
	@Test
	public void testWriting_L_L_D() {
		final byte[] referenceBTS_L_L_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x39, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x48, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x52, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x58, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x5E, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x62, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x65, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x68, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x6B, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
	}

	// 31 L_F_B
	@Test
	public void testWriting_L_F_B() {
		final byte[] referenceBTS_L_F_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x05, (byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC2, (byte) 0x66, (byte) 0x66,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x01, (byte) 0x19, (byte) 0x31, (byte) 0x4A, (byte) 0x62, (byte) 0x7A, (byte) 0x92, (byte) 0xAB,
			(byte) 0xC3, (byte) 0xDB };
	}

	// 32 L_F_S
	@Test
	public void testWriting_L_F_S() {
		final byte[] referenceBTS_L_F_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x05, (byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC2, (byte) 0x66, (byte) 0x66,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x4A,
			(byte) 0x00, (byte) 0x62, (byte) 0x00, (byte) 0x7A, (byte) 0x00, (byte) 0x92, (byte) 0x00, (byte) 0xAB,
			(byte) 0x00, (byte) 0xC3, (byte) 0x00, (byte) 0xDB };
	}

	// 33 L_F_I
	@Test
	public void testWriting_L_F_I() {
		final byte[] referenceBTS_L_F_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x05, (byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC2, (byte) 0x66, (byte) 0x66,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x4A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x62, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x92, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xAB,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC3, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xDB };
	}

	// 34 L_F_L
	@Test
	public void testWriting_L_F_L() {
		final byte[] referenceBTS_L_F_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x05, (byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC2, (byte) 0x66, (byte) 0x66,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x4A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x62,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x92,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xAB,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC3,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xDB };
	}

	// 35 L_F_F
	@Test
	public void testWriting_L_F_F() {
		final byte[] referenceBTS_L_F_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x05, (byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC2, (byte) 0x66, (byte) 0x66,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A, (byte) 0x41, (byte) 0xCC, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0x47, (byte) 0x33, (byte) 0x33, (byte) 0x42, (byte) 0x94, (byte) 0x33, (byte) 0x32,
			(byte) 0x42, (byte) 0xC4, (byte) 0xCC, (byte) 0xCC, (byte) 0x42, (byte) 0xF5, (byte) 0x66, (byte) 0x66,
			(byte) 0x43, (byte) 0x12, (byte) 0xFF, (byte) 0xFF, (byte) 0x43, (byte) 0x2B, (byte) 0x4C, (byte) 0xCC,
			(byte) 0x43, (byte) 0x43, (byte) 0x99, (byte) 0x99, (byte) 0x43, (byte) 0x5B, (byte) 0xE6, (byte) 0x66 };
	}

	// 36 L_F_D
	@Test
	public void testWriting_L_F_D() {
		final byte[] referenceBTS_L_F_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x05, (byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC2, (byte) 0x66, (byte) 0x66,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x39, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x48, (byte) 0xE6, (byte) 0x66, (byte) 0x60, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x52, (byte) 0x86, (byte) 0x66, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x58, (byte) 0x99, (byte) 0x99, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x5E, (byte) 0xAC, (byte) 0xCC, (byte) 0xC0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x62, (byte) 0x5F, (byte) 0xFF, (byte) 0xE0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x65, (byte) 0x69, (byte) 0x99, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x68, (byte) 0x73, (byte) 0x33, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x6B, (byte) 0x7C, (byte) 0xCC, (byte) 0xC0, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
	}

	// 37 L_D_B
	@Test
	public void testWriting_L_D_B() {
		final byte[] referenceBTS_L_D_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x06, (byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33,
			(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x38, (byte) 0x4C, (byte) 0xCC,
			(byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x01, (byte) 0x19, (byte) 0x31, (byte) 0x4A, (byte) 0x62, (byte) 0x7A, (byte) 0x93, (byte) 0xAB,
			(byte) 0xC3, (byte) 0xDB };
	}

	// 38 L_D_S
	@Test
	public void testWriting_L_D_S() {
		final byte[] referenceBTS_L_D_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x06, (byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33,
			(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x38, (byte) 0x4C, (byte) 0xCC,
			(byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x4A,
			(byte) 0x00, (byte) 0x62, (byte) 0x00, (byte) 0x7A, (byte) 0x00, (byte) 0x93, (byte) 0x00, (byte) 0xAB,
			(byte) 0x00, (byte) 0xC3, (byte) 0x00, (byte) 0xDB };
	}

	// 39 L_D_I
	@Test
	public void testWriting_L_D_I() {
		final byte[] referenceBTS_L_D_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x06, (byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33,
			(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x38, (byte) 0x4C, (byte) 0xCC,
			(byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x4A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x62, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x93, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xAB,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC3, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xDB };
	}

	// 40 L_D_L
	@Test
	public void testWriting_L_D_L() {
		final byte[] referenceBTS_L_D_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x06, (byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33,
			(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x38, (byte) 0x4C, (byte) 0xCC,
			(byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x4A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x62,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x93,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xAB,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC3,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xDB };
	}

	// 41 L_D_F
	@Test
	public void testWriting_L_D_F() {
		final byte[] referenceBTS_L_D_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x06, (byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33,
			(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x38, (byte) 0x4C, (byte) 0xCC,
			(byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A, (byte) 0x41, (byte) 0xCC, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0x47, (byte) 0x33, (byte) 0x33, (byte) 0x42, (byte) 0x94, (byte) 0x33, (byte) 0x33,
			(byte) 0x42, (byte) 0xC4, (byte) 0xCC, (byte) 0xCD, (byte) 0x42, (byte) 0xF5, (byte) 0x66, (byte) 0x66,
			(byte) 0x43, (byte) 0x13, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x2B, (byte) 0x4C, (byte) 0xCD,
			(byte) 0x43, (byte) 0x43, (byte) 0x99, (byte) 0x9A, (byte) 0x43, (byte) 0x5B, (byte) 0xE6, (byte) 0x66 };
	}

	// 42 L_D_D
	@Test
	public void testWriting_L_D_D() {
		final byte[] referenceBTS_L_D_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x25, (byte) 0x06, (byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33,
			(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x38, (byte) 0x4C, (byte) 0xCC,
			(byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33,
			(byte) 0x40, (byte) 0x39, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x48, (byte) 0xE6, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x67,
			(byte) 0x40, (byte) 0x52, (byte) 0x86, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x67,
			(byte) 0x40, (byte) 0x58, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x40, (byte) 0x5E, (byte) 0xAC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD,
			(byte) 0x40, (byte) 0x62, (byte) 0x60, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x65, (byte) 0x69, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99,
			(byte) 0x40, (byte) 0x68, (byte) 0x73, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33,
			(byte) 0x40, (byte) 0x6B, (byte) 0x7C, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD };
	}

	// 43 D_N_B
	@Test
	public void testBuiltTimebase_D() {
		final int numSamples = 10;
		final double t0_D = 13.0;
		final double dt_D = 37.0;
		final int numSamplesSubset = 5;
		final int sourceOffset = 2;
		final int targetOffset = 0;
		
		// 'manually' build reference time stamps
		final double[] timebase = new double[numSamples];
		for (int i=0; i<numSamples; ++i) {
			timebase[i] = t0_D + i*dt_D;
		}
		final double[] timebase_subset = new double[numSamplesSubset];
		System.arraycopy(timebase, sourceOffset, timebase_subset, targetOffset, numSamplesSubset);
		
		// no sourceOffset and targetOffset given
		final double[] targetTimebase = new double[numSamples];
		BinaryTimeseries.buildTimebase(targetTimebase, t0_D, dt_D);
		assertArrayEquals(timebase, targetTimebase);
		
		// sourceOffset and targetOffset are given
		final double[] targetTimebase_subset = new double[numSamplesSubset];
		BinaryTimeseries.buildTimebase(sourceOffset, targetTimebase_subset, targetOffset, numSamplesSubset, t0_D, dt_D);
		assertArrayEquals(timebase_subset, targetTimebase_subset);
	}

	@Test
	public void testFirstIndexInside_D() {
		final double t0_D  = 13.0;
		final double dt_D  = 37.0;
		final double t_l_D = 80.0;
		assertEquals(2, BinaryTimeseries.firstIndexInside(t0_D, dt_D, t_l_D));
	}

	@Test
	public void testLastIndexInside_D() {
		final double t0_D  = 13.0;
		final double dt_D  = 37.0;
		final double t_u_D = 300.0;
		assertEquals(7, BinaryTimeseries.lastIndexInside(t0_D, dt_D, t_u_D));
	}

	@Test
	public void testWriting_D_N_B() {
		final byte[] referenceBTS_D_N_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07,
			(byte) 0x08, (byte) 0x09 };
	}

	// 44 D_N_S
	@Test
	public void testWriting_D_N_S() {
		final byte[] referenceBTS_D_N_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x03,
			(byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x07,
			(byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x09 };
	}

	// 45 D_N_I
	@Test
	public void testWriting_D_N_I() {
		final byte[] referenceBTS_D_N_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x07,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x09 };
	}

	// 46 D_N_L
	@Test
	public void testWriting_D_N_L() {
		final byte[] referenceBTS_D_N_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x07,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x09 };
	}

	// 47 D_N_F
	@Test
	public void testWriting_D_N_F() {
		final byte[] referenceBTS_D_N_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x3F, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x40, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0xA0, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0xC0, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0xE0, (byte) 0x00, (byte) 0x00,
			(byte) 0x41, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0x10, (byte) 0x00, (byte) 0x00 };
	}

	// 48 D_N_D
	@Test
	public void testWriting_D_N_D() {
		final byte[] referenceBTS_D_N_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x3F, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x08, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x10, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x14, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x1C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x22, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
	}

	// 49 D_B_B
	@Test
	public void testWriting_D_B_B() {
		final byte[] referenceBTS_D_B_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x01, (byte) 0x19, (byte) 0x31, (byte) 0x49, (byte) 0x61, (byte) 0x79, (byte) 0x91, (byte) 0xA9,
			(byte) 0xC1, (byte) 0xD9 };
	}

	// 50 D_B_S
	@Test
	public void testWriting_D_B_S() {
		final byte[] referenceBTS_D_B_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x79, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0xD9 };
	}

	// 51 D_B_I
	@Test
	public void testWriting_D_B_I() {
		final byte[] referenceBTS_D_B_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 52 D_B_L
	@Test
	public void testWriting_D_B_L() {
		final byte[] referenceBTS_D_B_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 53 D_B_F
	@Test
	public void testWriting_D_B_F() {
		final byte[] referenceBTS_D_B_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC8, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0x44, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0x92, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0xC2, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0xF2, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x11, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x29, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x41, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x59, (byte) 0x00, (byte) 0x00 };
	}

	// 54 D_B_D
	@Test
	public void testWriting_D_B_D() {
		final byte[] referenceBTS_D_B_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x39, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x48, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x52, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x58, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x5E, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x62, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x65, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x68, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x6B, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
	}

	// 55 D_S_B
	@Test
	public void testWriting_D_S_B() {
		final byte[] referenceBTS_D_S_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x01, (byte) 0x19, (byte) 0x31, (byte) 0x49, (byte) 0x61, (byte) 0x79, (byte) 0x91, (byte) 0xA9,
			(byte) 0xC1, (byte) 0xD9 };
	}

	// 56 D_S_S
	@Test
	public void testWriting_D_S_S() {
		final byte[] referenceBTS_D_S_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x79, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0xD9 };
	}

	// 57 D_S_I
	@Test
	public void testWriting_D_S_I() {
		final byte[] referenceBTS_D_S_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 58 D_S_L
	@Test
	public void testWriting_D_S_L() {
		final byte[] referenceBTS_D_S_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 59 D_S_F
	@Test
	public void testWriting_D_S_F() {
		final byte[] referenceBTS_D_S_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC8, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0x44, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0x92, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0xC2, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0xF2, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x11, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x29, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x41, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x59, (byte) 0x00, (byte) 0x00 };
	}

	// 60 D_S_D
	@Test
	public void testWriting_D_S_D() {
		final byte[] referenceBTS_D_S_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x39, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x48, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x52, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x58, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x5E, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x62, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x65, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x68, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x6B, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
	}

	// 61 D_I_B
	@Test
	public void testWriting_D_I_B() {
		final byte[] referenceBTS_D_I_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x01, (byte) 0x19, (byte) 0x31, (byte) 0x49, (byte) 0x61, (byte) 0x79, (byte) 0x91, (byte) 0xA9,
			(byte) 0xC1, (byte) 0xD9 };
	}

	// 62 D_I_S
	@Test
	public void testWriting_D_I_S() {
		final byte[] referenceBTS_D_I_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x79, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0xD9 };
	}

	// 63 D_I_I
	@Test
	public void testWriting_D_I_I() {
		final byte[] referenceBTS_D_I_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 64 D_I_L
	@Test
	public void testWriting_D_I_L() {
		final byte[] referenceBTS_D_I_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 65 D_I_F
	@Test
	public void testWriting_D_I_F() {
		final byte[] referenceBTS_D_I_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC8, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0x44, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0x92, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0xC2, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0xF2, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x11, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x29, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x41, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x59, (byte) 0x00, (byte) 0x00 };
	}

	// 66 D_I_D
	@Test
	public void testWriting_D_I_D() {
		final byte[] referenceBTS_D_I_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x39, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x48, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x52, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x58, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x5E, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x62, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x65, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x68, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x6B, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
	}

	// 67 D_L_B
	@Test
	public void testWriting_D_L_B() {
		final byte[] referenceBTS_D_L_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x01, (byte) 0x19, (byte) 0x31, (byte) 0x49, (byte) 0x61, (byte) 0x79, (byte) 0x91, (byte) 0xA9,
			(byte) 0xC1, (byte) 0xD9 };
	}

	// 68 D_L_S
	@Test
	public void testWriting_D_L_S() {
		final byte[] referenceBTS_D_L_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x79, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0xD9 };
	}

	// 69 D_L_I
	@Test
	public void testWriting_D_L_I() {
		final byte[] referenceBTS_D_L_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 70 D_L_L
	@Test
	public void testWriting_D_L_L() {
		final byte[] referenceBTS_D_L_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x49,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x61,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x79,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x91,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xA9,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC1,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xD9 };
	}

	// 71 D_L_F
	@Test
	public void testWriting_D_L_F() {
		final byte[] referenceBTS_D_L_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC8, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0x44, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0x92, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0xC2, (byte) 0x00, (byte) 0x00, (byte) 0x42, (byte) 0xF2, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x11, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x29, (byte) 0x00, (byte) 0x00,
			(byte) 0x43, (byte) 0x41, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x59, (byte) 0x00, (byte) 0x00 };
	}

	// 72 D_L_D
	@Test
	public void testWriting_D_L_D() {
		final byte[] referenceBTS_D_L_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x39, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x48, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x52, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x58, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x5E, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x62, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x65, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x68, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x6B, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
	}

	// 73 D_F_B
	@Test
	public void testWriting_D_F_B() {
		final byte[] referenceBTS_D_F_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC2, (byte) 0x66, (byte) 0x66,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x01, (byte) 0x19, (byte) 0x31, (byte) 0x4A, (byte) 0x62, (byte) 0x7A, (byte) 0x92, (byte) 0xAB,
			(byte) 0xC3, (byte) 0xDB };
	}

	// 74 D_F_S
	@Test
	public void testWriting_D_F_S() {
		final byte[] referenceBTS_D_F_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC2, (byte) 0x66, (byte) 0x66,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x4A,
			(byte) 0x00, (byte) 0x62, (byte) 0x00, (byte) 0x7A, (byte) 0x00, (byte) 0x92, (byte) 0x00, (byte) 0xAB,
			(byte) 0x00, (byte) 0xC3, (byte) 0x00, (byte) 0xDB };
	}

	// 75 D_F_I
	@Test
	public void testWriting_D_F_I() {
		final byte[] referenceBTS_D_F_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC2, (byte) 0x66, (byte) 0x66,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x4A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x62, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x92, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xAB,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC3, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xDB };
	}

	// 76 D_F_L
	@Test
	public void testWriting_D_F_L() {
		final byte[] referenceBTS_D_F_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC2, (byte) 0x66, (byte) 0x66,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x4A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x62,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x92,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xAB,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC3,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xDB };
	}

	// 77 D_F_F
	@Test
	public void testWriting_D_F_F() {
		final byte[] referenceBTS_D_F_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC2, (byte) 0x66, (byte) 0x66,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A, (byte) 0x41, (byte) 0xCC, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0x47, (byte) 0x33, (byte) 0x33, (byte) 0x42, (byte) 0x94, (byte) 0x33, (byte) 0x32,
			(byte) 0x42, (byte) 0xC4, (byte) 0xCC, (byte) 0xCC, (byte) 0x42, (byte) 0xF5, (byte) 0x66, (byte) 0x66,
			(byte) 0x43, (byte) 0x12, (byte) 0xFF, (byte) 0xFF, (byte) 0x43, (byte) 0x2B, (byte) 0x4C, (byte) 0xCC,
			(byte) 0x43, (byte) 0x43, (byte) 0x99, (byte) 0x99, (byte) 0x43, (byte) 0x5B, (byte) 0xE6, (byte) 0x66 };
	}

	// 78 D_F_D
	@Test
	public void testWriting_D_F_D() {
		final byte[] referenceBTS_D_F_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xC2, (byte) 0x66, (byte) 0x66,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x39, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x48, (byte) 0xE6, (byte) 0x66, (byte) 0x60, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x52, (byte) 0x86, (byte) 0x66, (byte) 0x40, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x58, (byte) 0x99, (byte) 0x99, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x5E, (byte) 0xAC, (byte) 0xCC, (byte) 0xC0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x62, (byte) 0x5F, (byte) 0xFF, (byte) 0xE0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x65, (byte) 0x69, (byte) 0x99, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x68, (byte) 0x73, (byte) 0x33, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x6B, (byte) 0x7C, (byte) 0xCC, (byte) 0xC0, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
	}

	// 79 D_D_B
	@Test
	public void testWriting_D_D_B() {
		final byte[] referenceBTS_D_D_B = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33,
			(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x38, (byte) 0x4C, (byte) 0xCC,
			(byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x01, (byte) 0x19, (byte) 0x31, (byte) 0x4A, (byte) 0x62, (byte) 0x7A, (byte) 0x93, (byte) 0xAB,
			(byte) 0xC3, (byte) 0xDB };
	}

	// 80 D_D_S
	@Test
	public void testWriting_D_D_S() {
		final byte[] referenceBTS_D_D_S = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33,
			(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x38, (byte) 0x4C, (byte) 0xCC,
			(byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x19, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x4A,
			(byte) 0x00, (byte) 0x62, (byte) 0x00, (byte) 0x7A, (byte) 0x00, (byte) 0x93, (byte) 0x00, (byte) 0xAB,
			(byte) 0x00, (byte) 0xC3, (byte) 0x00, (byte) 0xDB };
	}

	// 81 D_D_I
	@Test
	public void testWriting_D_D_I() {
		final byte[] referenceBTS_D_D_I = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33,
			(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x38, (byte) 0x4C, (byte) 0xCC,
			(byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x4A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x62, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x93, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xAB,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC3, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xDB };
	}

	// 82 D_D_L
	@Test
	public void testWriting_D_D_L() {
		final byte[] referenceBTS_D_D_L = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33,
			(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x38, (byte) 0x4C, (byte) 0xCC,
			(byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x31,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x4A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x62,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7A,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x93,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xAB,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC3,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xDB };
	}

	// 83 D_D_F
	@Test
	public void testWriting_D_D_F() {
		final byte[] referenceBTS_D_D_F = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33,
			(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x38, (byte) 0x4C, (byte) 0xCC,
			(byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0x99, (byte) 0x99, (byte) 0x9A, (byte) 0x41, (byte) 0xCC, (byte) 0x00, (byte) 0x00,
			(byte) 0x42, (byte) 0x47, (byte) 0x33, (byte) 0x33, (byte) 0x42, (byte) 0x94, (byte) 0x33, (byte) 0x33,
			(byte) 0x42, (byte) 0xC4, (byte) 0xCC, (byte) 0xCD, (byte) 0x42, (byte) 0xF5, (byte) 0x66, (byte) 0x66,
			(byte) 0x43, (byte) 0x13, (byte) 0x00, (byte) 0x00, (byte) 0x43, (byte) 0x2B, (byte) 0x4C, (byte) 0xCD,
			(byte) 0x43, (byte) 0x43, (byte) 0x99, (byte) 0x9A, (byte) 0x43, (byte) 0x5B, (byte) 0xE6, (byte) 0x66 };
	}

	// 84 D_D_D
	@Test
	public void testWriting_D_D_D() {
		final byte[] referenceBTS_D_D_D = new byte[] {
			(byte) 0x00, (byte) 0x01, (byte) 0x06, (byte) 0x40, (byte) 0x2A, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x42, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33,
			(byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x40, (byte) 0x38, (byte) 0x4C, (byte) 0xCC,
			(byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A,
			(byte) 0x3F, (byte) 0xF3, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33,
			(byte) 0x40, (byte) 0x39, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x48, (byte) 0xE6, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x67,
			(byte) 0x40, (byte) 0x52, (byte) 0x86, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x67,
			(byte) 0x40, (byte) 0x58, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x9A,
			(byte) 0x40, (byte) 0x5E, (byte) 0xAC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD,
			(byte) 0x40, (byte) 0x62, (byte) 0x60, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x40, (byte) 0x65, (byte) 0x69, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99,
			(byte) 0x40, (byte) 0x68, (byte) 0x73, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33, (byte) 0x33,
			(byte) 0x40, (byte) 0x6B, (byte) 0x7C, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCD };
	}

	// total number of tests: 84




	
	
	
	
	/***********************************
	 * AUTO-GENERATED CODE  ENDS  HERE *
	 ***********************************/
}
